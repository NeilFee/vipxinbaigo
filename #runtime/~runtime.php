<?php $GLOBALS['_beginTime'] = microtime(TRUE); defined('APP_DEBUG') or define('APP_DEBUG',false); defined('SITE_PATH') or define('SITE_PATH','/opt/apache2/htdoc_5.14'); defined('APP_NAME') or define('APP_NAME','Shuipf'); defined('APP_PATH') or define('APP_PATH','/opt/apache2/htdoc_5.14/shuipf/'); defined('RUNTIME_PATH') or define('RUNTIME_PATH','/opt/apache2/htdoc_5.14/#runtime/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_PATH') or define('THINK_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/'); defined('RUNTIME_FILE') or define('RUNTIME_FILE','/opt/apache2/htdoc_5.14/#runtime/~runtime.php'); defined('THINK_VERSION') or define('THINK_VERSION','3.1.3'); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',0); defined('IS_WIN') or define('IS_WIN',0); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','/index.php'); defined('__ROOT__') or define('__ROOT__',''); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('CORE_PATH') or define('CORE_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/Lib/'); defined('EXTEND_PATH') or define('EXTEND_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/Extend/'); defined('MODE_PATH') or define('MODE_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/Extend/Mode/'); defined('ENGINE_PATH') or define('ENGINE_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/Extend/Engine/'); defined('VENDOR_PATH') or define('VENDOR_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/Extend/Vendor/'); defined('LIBRARY_PATH') or define('LIBRARY_PATH','/opt/apache2/htdoc_5.14/shuipf/Core/Extend/Library/'); defined('COMMON_PATH') or define('COMMON_PATH','/opt/apache2/htdoc_5.14/shuipf/Common/'); defined('LIB_PATH') or define('LIB_PATH','/opt/apache2/htdoc_5.14/shuipf/Lib/'); defined('CONF_PATH') or define('CONF_PATH','/opt/apache2/htdoc_5.14/shuipf/Conf/'); defined('LANG_PATH') or define('LANG_PATH','/opt/apache2/htdoc_5.14/shuipf/Lang/'); defined('TMPL_PATH') or define('TMPL_PATH','/opt/apache2/htdoc_5.14/shuipf/Tpl/'); defined('HTML_PATH') or define('HTML_PATH','/opt/apache2/htdoc_5.14/shuipf/Html/'); defined('LOG_PATH') or define('LOG_PATH','/opt/apache2/htdoc_5.14/#runtime/Logs/'); defined('TEMP_PATH') or define('TEMP_PATH','/opt/apache2/htdoc_5.14/#runtime/Temp/'); defined('DATA_PATH') or define('DATA_PATH','/opt/apache2/htdoc_5.14/#runtime/Data/'); defined('CACHE_PATH') or define('CACHE_PATH','/opt/apache2/htdoc_5.14/#runtime/Cache/'); defined('SHUIPF_VERSION') or define('SHUIPF_VERSION','1.5.0'); defined('SHUIPF_BUILD') or define('SHUIPF_BUILD',20140226); defined('SHUIPF_APPNAME') or define('SHUIPF_APPNAME','ShuipFCMS_UTF8_Free'); defined('SITEURL') or define('SITEURL','/'); defined('CONFIG_SITENAME') or define('CONFIG_SITENAME','新世界会员网站后台系统'); defined('CONFIG_SITEURL') or define('CONFIG_SITEURL','/'); defined('CONFIG_SITEFILEURL') or define('CONFIG_SITEFILEURL','/d/file/'); defined('CONFIG_SITEEMAIL') or define('CONFIG_SITEEMAIL','admin@abc3210.com'); defined('CONFIG_SITEINFO') or define('CONFIG_SITEINFO','新世界会员网站后台系统'); defined('CONFIG_SITEKEYWORDS') or define('CONFIG_SITEKEYWORDS','新世界会员网站后台系统'); defined('CONFIG_UPLOADMAXSIZE') or define('CONFIG_UPLOADMAXSIZE','20240'); defined('CONFIG_UPLOADALLOWEXT') or define('CONFIG_UPLOADALLOWEXT','jpg|jpeg|gif|bmp|png|doc|docx|xls|xlsx|ppt|pptx|pdf|txt|rar|zip|swf'); defined('CONFIG_QTUPLOADMAXSIZE') or define('CONFIG_QTUPLOADMAXSIZE','200'); defined('CONFIG_QTUPLOADALLOWEXT') or define('CONFIG_QTUPLOADALLOWEXT','jpg|jpeg|gif'); defined('CONFIG_WATERMARKENABLE') or define('CONFIG_WATERMARKENABLE','0'); defined('CONFIG_WATERMARKMINWIDTH') or define('CONFIG_WATERMARKMINWIDTH','300'); defined('CONFIG_WATERMARKMINHEIGHT') or define('CONFIG_WATERMARKMINHEIGHT','100'); defined('CONFIG_WATERMARKIMG') or define('CONFIG_WATERMARKIMG','/statics/images/mark_bai.png'); defined('CONFIG_WATERMARKPCT') or define('CONFIG_WATERMARKPCT','80'); defined('CONFIG_WATERMARKQUALITY') or define('CONFIG_WATERMARKQUALITY','85'); defined('CONFIG_WATERMARKPOS') or define('CONFIG_WATERMARKPOS','7'); defined('CONFIG_INDEXTP') or define('CONFIG_INDEXTP','index.php'); defined('CONFIG_THEME') or define('CONFIG_THEME','Default'); defined('CONFIG_GENERATE') or define('CONFIG_GENERATE','1'); defined('CONFIG_TAGURL') or define('CONFIG_TAGURL','8'); defined('CONFIG_FTPSTATUS') or define('CONFIG_FTPSTATUS','0'); defined('CONFIG_FTPUSER') or define('CONFIG_FTPUSER',''); defined('CONFIG_FTPPASSWORD') or define('CONFIG_FTPPASSWORD',''); defined('CONFIG_FTPHOST') or define('CONFIG_FTPHOST',''); defined('CONFIG_FTPPORT') or define('CONFIG_FTPPORT','21'); defined('CONFIG_FTPPASV') or define('CONFIG_FTPPASV','1'); defined('CONFIG_FTPSSL') or define('CONFIG_FTPSSL','0'); defined('CONFIG_FTPTIMEOUT') or define('CONFIG_FTPTIMEOUT','10'); defined('CONFIG_FTPUPPAT') or define('CONFIG_FTPUPPAT','/'); defined('CONFIG_MAIL_TYPE') or define('CONFIG_MAIL_TYPE','1'); defined('CONFIG_MAIL_SERVER') or define('CONFIG_MAIL_SERVER','xx.xx.com'); defined('CONFIG_MAIL_PORT') or define('CONFIG_MAIL_PORT','25'); defined('CONFIG_MAIL_FROM') or define('CONFIG_MAIL_FROM','xx@xx.com'); defined('CONFIG_MAIL_AUTH') or define('CONFIG_MAIL_AUTH','1'); defined('CONFIG_MAIL_USER') or define('CONFIG_MAIL_USER',''); defined('CONFIG_MAIL_PASSWORD') or define('CONFIG_MAIL_PASSWORD',''); defined('CONFIG_MAIL_FNAME') or define('CONFIG_MAIL_FNAME','管理员'); defined('CONFIG_FILEEXCLUDE') or define('CONFIG_FILEEXCLUDE',''); defined('CONFIG_INDEX_URLRULEID') or define('CONFIG_INDEX_URLRULEID','11'); defined('CONFIG_DOMAINACCESS') or define('CONFIG_DOMAINACCESS','0'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function T($template = '', $layer = '') { if (is_file($template)) { return $template; } if (false === strpos($template, '://')) { $template = APP_NAME . '://' . str_replace(':', '/', $template); } $info = parse_url($template); $file = $info['host'] . (isset($info['path']) ? $info['path'] : ''); $group = isset($info['user']) ? $info['user'] . '/' : (defined('GROUP_NAME') ? GROUP_NAME . '/' : ''); $app = $info['scheme']; $layer = $layer ? $layer : C('DEFAULT_V_LAYER'); if (($list = C('EXTEND_GROUP_LIST')) && isset($list[$app])) { $baseUrl = $list[$app] . '/' . $group . $layer . '/'; } elseif (1 == C('APP_GROUP_MODE')) { $baseUrl = dirname(BASE_LIB_PATH) . '/' . $group . $layer . '/'; } else { $baseUrl = TMPL_PATH . $group; } $depr = C('TMPL_FILE_DEPR'); if ('' == $file) { $file = MODULE_NAME . $depr . ACTION_NAME; } elseif (false === strpos($file, $depr)) { $file = MODULE_NAME . $depr . $file; } return $baseUrl . $file . C('TMPL_TEMPLATE_SUFFIX'); } function I($name, $default = '', $filter = null) { if (strpos($name, '.')) { list($method, $name) = explode('.', $name, 2); } else { $method = 'param'; } switch (strtolower($method)) { case 'get' : $input = & $_GET; break; case 'post' : $input = & $_POST; break; case 'put' : parse_str(file_get_contents('php://input'), $input); break; case 'param' : switch ($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php://input'), $input); break; default: $input = $_GET; } if (C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])) { $input = array_merge($input, $_GET[C('VAR_URL_PARAMS')]); } break; case 'request' : $input = & $_REQUEST; break; case 'session' : $input = & $_SESSION; break; case 'cookie' : $input = & $_COOKIE; break; case 'server' : $input = & $_SERVER; break; case 'globals' : $input = & $GLOBALS; break; default: return NULL; } if (C('VAR_FILTERS')) { $_filters = explode(',', C('VAR_FILTERS')); foreach ($_filters as $_filter) { array_walk_recursive($input, $_filter); } } if (empty($name)) { $data = $input; $filters = isset($filter) ? $filter : C('DEFAULT_FILTER'); if ($filters) { $filters = explode(',', $filters); foreach ($filters as $filter) { $data = array_map($filter, $data); } } } elseif (isset($input[$name])) { $data = $input[$name]; $filters = isset($filter) ? $filter : C('DEFAULT_FILTER'); if ($filters) { $filters = explode(',', $filters); foreach ($filters as $filter) { if (function_exists($filter)) { $data = is_array($data) ? array_map($filter, $data) : $filter($data); } else { $data = filter_var($data, is_int($filter) ? $filter : filter_id($filter)); if (false === $data) { return isset($default) ? $default : NULL; } } } } } else { $data = isset($default) ? $default : NULL; } return $data; } function G($start, $end = '', $dec = 4) { static $_info = array(); static $_mem = array(); if (is_float($end)) { $_info[$start] = $end; } elseif (!empty($end)) { if (!isset($_info[$end])) $_info[$end] = microtime(TRUE); if (MEMORY_LIMIT_ON && $dec == 'm') { if (!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end] - $_mem[$start]) / 1024); }else { return number_format(($_info[$end] - $_info[$start]), $dec); } } else { $_info[$start] = microtime(TRUE); if (MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function N($key, $step = 0, $save = false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save) ? S('N_' . $key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if (false !== $save) { S('N_' . $key, $_num[$key], $save); } } function parse_name($name, $type = 0) { if ($type) { return ucfirst(preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name)); } else { return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function require_array($array, $return = false) { foreach ($array as $file) { if (require_cache($file) && $return) return true; } if ($return) return false; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext = '.class.php') { static $_file = array(); $class = str_replace(array('.', '#'), array('/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('/', $class); if (empty($baseUrl)) { $libPath = defined('BASE_LIB_PATH') ? BASE_LIB_PATH : LIB_PATH; if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname($libPath); $class = substr_replace($class, basename($libPath) . '/', 0, strlen($class_strut[0]) + 1); } elseif ('think' == strtolower($class_strut[0])) { $baseUrl = CORE_PATH; $class = substr($class, 6); } elseif (in_array(strtolower($class_strut[0]), array('org', 'com'))) { $baseUrl = LIBRARY_PATH; } else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '../' . $class_strut[0] . '/' . basename($libPath) . '/'; } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class), false)) { return require_cache($classfile); } } function load($name, $baseUrl = '', $ext = '.php') { $name = str_replace(array('.', '#'), array('/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@/')) { $baseUrl = COMMON_PATH; $name = substr($name, 2); } else { $baseUrl = EXTEND_PATH . 'Function/'; } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext = '.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile = '') { static $_alias = array(); if (is_string($alias)) { if (isset($_alias[$alias])) { return require_cache($_alias[$alias]); } elseif ('' !== $classfile) { $_alias[$alias] = $classfile; return; } } elseif (is_array($alias)) { $_alias = array_merge($_alias, $alias); return; } return false; } function D($name = '', $layer = '') { if (empty($name)) return new Model; static $_model = array(); $layer = $layer ? $layer : C('DEFAULT_M_LAYER'); if (strpos($name, '://')) { list($app) = explode('://', $name); $name = str_replace('://', '/' . $layer . '/', $name); } else { $app = C('DEFAULT_APP'); $name = $app . '/' . $layer . '/' . $name; } if (isset($_model[$name])) return $_model[$name]; $path = explode('/', $name); if ($list = C('EXTEND_GROUP_LIST') && isset($list[$app])) { $baseUrl = $list[$app]; import($path[2] . '/' . $path[1] . '/' . $path[3] . $layer, $baseUrl); } elseif (count($path) > 3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0] == '@' ? dirname(BASE_LIB_PATH) : APP_PATH . '../' . $path[0] . '/' . C('APP_GROUP_PATH') . '/'; import($path[2] . '/' . $path[1] . '/' . $path[3] . $layer, $baseUrl); } else { import($name . $layer); } $class = basename($name . $layer); if (class_exists($class)) { $model = new $class(basename($name)); } else { $model = new Model(basename($name)); } $_model[$name] = $model; return $model; } function M($name = '', $tablePrefix = '', $connection = '') { static $_model = array(); if (strpos($name, ':')) { list($class, $name) = explode(':', $name); } else { $class = 'Model'; } $guid = $tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name, $tablePrefix, $connection); return $_model[$guid]; } function A($name, $layer = '', $common = false) { static $_action = array(); $layer = $layer ? $layer : C('DEFAULT_C_LAYER'); if (strpos($name, '://')) { list($app) = explode('://', $name); $name = str_replace('://', '/' . $layer . '/', $name); } else { $app = '@'; $name = '@/' . $layer . '/' . $name; } if (isset($_action[$name])) return $_action[$name]; $path = explode('/', $name); if ($list = C('EXTEND_GROUP_LIST') && isset($list[$app])) { $baseUrl = $list[$app]; import($path[2] . '/' . $path[1] . '/' . $path[3] . $layer, $baseUrl); } elseif (count($path) > 3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0] == '@' ? dirname(BASE_LIB_PATH) : APP_PATH . '../' . $path[0] . '/' . C('APP_GROUP_PATH') . '/'; import($path[2] . '/' . $path[1] . '/' . $path[3] . $layer, $baseUrl); } elseif ($common) { import(str_replace('@/', '', $name) . $layer, LIB_PATH); } else { import($name . $layer); } $class = basename($name . $layer); if (class_exists($class, false)) { $action = new $class(); $_action[$name] = $action; return $action; } else { return false; } } function R($url, $vars = array(), $layer = '') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module, $layer); if ($class) { if (is_string($vars)) { parse_str($vars, $vars); } return call_user_func_array(array(&$class, $action . C('ACTION_SUFFIX')), $vars); } else { return false; } } function L($name = null, $value = null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name = null, $value = null) { static $_config = array(); if (empty($name)) { if (!empty($value) && $array = S('c_' . $value)) { $_config = array_merge($_config, array_change_key_case($array)); } return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)) { $_config = array_merge($_config, array_change_key_case($name)); if (!empty($value)) { S('c_' . $value, $_config); } return; } return null; } function tag($tag, &$params = NULL) { $tags = C('tags.' . $tag); if ($tags) { if (APP_DEBUG) { G($tag . 'Start'); trace('[ 行为标签 ' . $tag . ' 开始执行 ] --START--', '', 'INFO'); } foreach ($tags as $id => $behavior) { D('Behavior')->behaviorDispatch($behavior, $params); } if (APP_DEBUG) { trace('[ 行为标签 ' . $tag . ' 执行结束 ] --END-- [ RunTime:' . G($tag . 'Start', $tag . 'End', 6) . 's ]', '', 'INFO'); } } else { return false; } } function add_tag_behavior($tag, $behavior, $path = '') { $array = C('tags.' . $tag); if (!$array) { $array = array(); } if ($path) { $array[$behavior] = $path; } else { $array[] = $behavior; } C('tags.' . $tag, $array); } function B($name, &$params = NULL) { if (strpos($name, '/')) { list($name, $method) = explode('/', $name); } else { $method = 'run'; } $class = $name . 'Behavior'; if (APP_DEBUG) { G('behaviorStart'); } $behavior = new $class(); $behavior->$method($params); if (APP_DEBUG) { G('behaviorEnd'); trace($name . ' Behavior ::' . $method . ' [ RunTime:' . G('behaviorStart', 'behaviorEnd', 6) . 's ]', '', 'INFO'); } } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\n"; for ($k = $i + 1; $k < $j; $k++) { if (is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if ($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function trace($value = '[think]', $label = '', $level = 'DEBUG', $record = false) { static $_trace = array(); if ('[think]' === $value) { return $_trace; } else { $info = ($label ? $label . ':' : '') . print_r($value, true); if ('ERR' == $level && C('TRACE_EXCEPTION')) { throw_exception($info); } $level = strtoupper($level); if (!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if ((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { Log::record($info, $level, $record); } } } class Think { private static $_instance = array(); static public function start() { register_shutdown_function(array('Think', 'fatalError')); set_error_handler(array('Think', 'appError')); set_exception_handler(array('Think', 'appException')); spl_autoload_register(array('Think', 'autoload')); App::run(); return; } public static function autoload($class) { if (alias_import($class)) return; $libPath = defined('BASE_LIB_PATH') ? BASE_LIB_PATH : LIB_PATH; $group = defined('GROUP_NAME') && C('APP_GROUP_MODE') == 0 ? GROUP_NAME . '/' : ''; $file = $class . '.class.php'; if (substr($class, -8) == 'Behavior') { if (require_array(array( CORE_PATH . 'Behavior/' . $file, EXTEND_PATH . 'Behavior/' . $file, LIB_PATH . 'Behavior/' . $file, $libPath . 'Behavior/' . $file), true) || (defined('MODE_NAME') && require_cache(MODE_PATH . ucwords(MODE_NAME) . '/Behavior/' . $file))) { return; } } elseif (substr($class, -5) == 'Model') { $model = ucwords(str_replace('Model', "", $class)); if (require_array(array( LIB_PATH . 'Model/' . $group . $file, $libPath . 'Model/' . $file, EXTEND_PATH . 'Model/' . $file, APP_PATH . C("APP_GROUP_PATH") . "/{$model}/Model/{$class}.class.php",), true)) { return; } } elseif (substr($class, -6) == 'Action') { if (require_array(array( LIB_PATH . 'Action/' . $group . $file, $libPath . 'Action/' . $file, EXTEND_PATH . 'Action/' . $file), true)) { return; } } elseif (substr($class, 0, 5) == 'Cache') { if (require_array(array( EXTEND_PATH . 'Driver/Cache/' . $file, CORE_PATH . 'Driver/Cache/' . $file), true)) { return; } } elseif (substr($class, 0, 2) == 'Db') { if (require_array(array( EXTEND_PATH . 'Driver/Db/' . $file, CORE_PATH . 'Driver/Db/' . $file), true)) { return; } } elseif (substr($class, 0, 8) == 'Template') { if (require_array(array( EXTEND_PATH . 'Driver/Template/' . $file, CORE_PATH . 'Driver/Template/' . $file), true)) { return; } } elseif (substr($class, 0, 6) == 'TagLib') { if (require_array(array( EXTEND_PATH . 'Driver/TagLib/' . $file, CORE_PATH . 'Driver/TagLib/' . $file, LIB_PATH . "/TagLib/{$class}.class.php"), true)) { return; } } elseif (substr($class, -6) == 'TagLib') { if (require_cache(LIB_PATH . "/TagLib/{$class}.class.php")) { return; } } elseif (substr($class, -7) == 'Service') { if (require_cache(LIB_PATH . "/Service/{$class}.class.php")) { return; } } elseif (substr($class, 0, 10) == 'Attachment') { if (require_cache(LIB_PATH . "/Driver/Attachment/{$class}.class.php")) { return; } } elseif (substr($class, 0, 8) == 'Passport') { if (require_cache(LIB_PATH . "/Driver/Passport/{$class}.class.php")) { return; } } elseif (in_array($class, array('content_update', 'content_output', 'content_input', 'content_form', 'content_delete'))) { if (require_cache(RUNTIME_PATH . "{$class}.class.php")) { return; } else { D("Content_cache")->model_content_cache(); if (is_file(RUNTIME_PATH . "{$class}.class.php")) { include RUNTIME_PATH . "{$class}.class.php"; } } } else { if (require_cache(LIB_PATH . "/Util/{$class}.class.php")) { return; } } $paths = explode(',', C('APP_AUTOLOAD_PATH')); foreach ($paths as $path) { if (import($path . '.' . $class)) return; } } static public function instance($class, $method = '') { $identify = $class . $method; if (!isset(self::$_instance[$identify])) { if (class_exists($class)) { $o = new $class(); if (!empty($method) && method_exists($o, $method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if ('throw_exception' == $trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; } else { $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } Log::record($error['message'], Log::ERR); halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); if (C('OUTPUT_ENCODE')) { $zlib = ini_get('zlib.output_compression'); if (empty($zlib)) ob_start('ob_gzhandler'); } $errorStr = "$errstr " . $errfile . " 第 $errline 行."; if (C('LOG_RECORD')) Log::write("[$errno] " . $errorStr, Log::ERR); function_exists('halt') ? halt($errorStr) : exit('ERROR:' . $errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr " . $errfile . " 第 $errline 行."; trace($errorStr, '', 'NOTIC'); break; } } static public function fatalError() { if (C('LOG_RECORD')) Log::save(); if ($e = error_get_last()) { switch ($e['type']) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); function_exists('halt') ? halt($e) : exit('ERROR:' . $e['message'] . ' in <b>' . $e['file'] . '</b> on line <b>' . $e['line'] . '</b>'); break; } } } } class ThinkException extends Exception { } abstract class Behavior { protected $options = array(); protected $groupName = ''; protected $template = ''; protected $tVar = array(); public function __construct() { if (!empty($this->options)) { foreach ($this->options as $name => $val) { if (NULL !== C($name)) { $this->options[$name] = C($name); } else { C($name, $val); } } array_change_key_case($this->options); } } public function __get($name) { return $this->options[strtolower($name)]; } public function assign($name, $value = '') { if (is_array($name)) { $this->tVar = array_merge($this->tVar, $name); } else { $this->tVar[$name] = $value; } } protected function renderFile($templateFile = '') { if (!file_exists_case($templateFile)) { $name = substr(get_class($this), 0, -8); $filename = empty($templateFile) ? $name : $templateFile; $templateFile = APP_PATH . C('APP_GROUP_PATH') . '/' . $this->groupName . '/Behavior/' . $name . '/' . $filename . C('TMPL_TEMPLATE_SUFFIX'); if (!file_exists_case($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_') . '[' . $templateFile . ']'); } ob_start(); ob_implicit_flush(0); $template = strtolower($this->template ? $this->template : (C('TMPL_ENGINE_TYPE') ? C('TMPL_ENGINE_TYPE') : 'php')); if ('php' == $template) { if (!empty($this->tVar)) extract($this->tVar, EXTR_OVERWRITE); include $templateFile; }elseif ('think' == $template) { if ($this->checkCache($templateFile)) { extract($this->tVar, EXTR_OVERWRITE); include C('CACHE_PATH') . md5($templateFile) . C('TMPL_CACHFILE_SUFFIX'); } else { if (!C('TMPL_L_DELIM')) { B('ParseTemplate'); } $tpl = Think::instance('ThinkTemplate'); $tpl->fetch($templateFile, $this->tVar); } } else { $class = 'Template' . ucwords($template); if (is_file(CORE_PATH . 'Driver/Template/' . $class . '.class.php')) { $path = CORE_PATH; } else { $path = EXTEND_PATH; } require_cache($path . 'Driver/Template/' . $class . '.class.php'); $tpl = new $class; $tpl->fetch($templateFile, $this->tVar); } $content = ob_get_clean(); return $content; } protected function checkCache($tmplTemplateFile) { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH') . md5($tmplTemplateFile) . C('TMPL_CACHFILE_SUFFIX'); if (!is_file($tmplCacheFile)) { return false; } elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; } elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile) + C('TMPL_CACHE_TIME')) { return false; } return true; } protected function display($templateFile = '') { echo $this->renderFile($templateFile); } abstract public function run(&$params); }alias_import(array ( 'Model' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Core/Model.class.php', 'Db' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Core/Db.class.php', 'Log' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Core/Log.class.php', 'ThinkTemplate' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Template/ThinkTemplate.class.php', 'TagLib' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Template/TagLib.class.php', 'Cache' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Core/Cache.class.php', 'Widget' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Core/Widget.class.php', 'TagLibCx' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Driver/TagLib/TagLibCx.class.php', )); function halt($error) { $e = array(); if (APP_DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); } } include C('TMPL_EXCEPTION_FILE'); exit; } function throw_exception($msg, $type = 'ThinkException', $code = 0) { if (class_exists($type, false)) throw new $type($msg, $code); else halt($msg); } function dump($var, $echo = true, $label = null, $strict = true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); return null; } else return $output; } function _404($msg = '', $url = '') { APP_DEBUG && throw_exception($msg); if ($msg && C('LOG_EXCEPTION_RECORD')) Log::write($msg); if (empty($url) && C('URL_404_REDIRECT')) { $url = C('URL_404_REDIRECT'); } if ($url) { redirect($url); } else { send_http_status(404); exit; } } function layout($layout) { if (false !== $layout) { C('LAYOUT_ON', true); if (is_string($layout)) { C('LAYOUT_NAME', $layout); } } else { C('LAYOUT_ON', false); } } function U($url = '', $vars = '', $suffix = true, $redirect = false, $domain = true) { static $_ucache = array(); $key = md5($url . (is_array($vars) ? implode("+", $vars) : $vars) . $suffix . $domain); if (isset($_ucache[$key])) { if ($redirect) { redirect($_ucache[$key]); } else { return $_ucache[$key]; } } $info = parse_url($url); $url = !empty($info['path']) ? $info['path'] : ACTION_NAME; if (isset($info['fragment'])) { $anchor = $info['fragment']; if (false !== strpos($anchor, '?')) { list($anchor, $info['query']) = explode('?', $anchor, 2); } if (false !== strpos($anchor, '@')) { list($anchor, $host) = explode('@', $anchor, 2); } } elseif (false !== strpos($url, '@')) { list($url, $host) = explode('@', $info['path'], 2); } $config_url = parse_url(CONFIG_SITEURL); if (isset($host)) { $domain = $host . (strpos($host, '.') ? '' : strstr($_SERVER['HTTP_HOST'], '.')); } elseif ($domain === true) { $domain = strtolower($config_url['host']); if (C('APP_SUB_DOMAIN_DEPLOY')) { $App = F("App"); if ($App['Domains']) { $path_list = explode(C('URL_PATHINFO_DEPR'), $url); if (count($path_list) < 3) { array_unshift($path_list, GROUP_NAME); } $Module_Domains_list = F("Module_Domains_list"); if ($Module_Domains_list[$path_list[0]]) { $domain = explode("|", $Module_Domains_list[$path_list[0]]); $domain = $domain[0]; $_domain = true; } if (defined("IN_ADMIN") && IN_ADMIN && !defined("APP_SUB_DOMAIN_NO") && $Module_Domains_list["Admin"]) { $domain = $Module_Domains_list["Admin"]; $domain = explode("|", $domain); $domain = $domain[0]; $admin_domain = true; unset($_domain); } elseif (!isset($_domain)) { $domain = strtolower($config_url['host']); } } } if ($domain) { if (isset($config_url['port']) && $config_url['port'] && (int) $config_url['port'] != 80) { $domain .= ":" . $config_url['port']; } } } if (is_string($vars)) { parse_str($vars, $vars); } elseif (!is_array($vars)) { $vars = array(); } if (isset($info['query'])) { parse_str($info['query'], $params); $vars = array_merge($params, $vars); } $depr = C('URL_PATHINFO_DEPR'); if ($url) { if (0 === strpos($url, '/')) { $route = true; $url = substr($url, 1); if ('/' != $depr) { $url = str_replace('/', $depr, $url); } } else { if ('/' != $depr) { $url = str_replace('/', $depr, $url); } $url = trim($url, $depr); $path = explode($depr, $url); $var = array(); $var[C('VAR_ACTION')] = !empty($path) ? array_pop($path) : ACTION_NAME; $var[C('VAR_MODULE')] = !empty($path) ? array_pop($path) : MODULE_NAME; if ($maps = C('URL_ACTION_MAP')) { if (isset($maps[strtolower($var[C('VAR_MODULE')])])) { $maps = $maps[strtolower($var[C('VAR_MODULE')])]; if ($action = array_search(strtolower($var[C('VAR_ACTION')]), $maps)) { $var[C('VAR_ACTION')] = $action; } } } if ($maps = C('URL_MODULE_MAP')) { if ($module = array_search(strtolower($var[C('VAR_MODULE')]), $maps)) { $var[C('VAR_MODULE')] = $module; } } if (C('URL_CASE_INSENSITIVE')) { $var[C('VAR_MODULE')] = parse_name($var[C('VAR_MODULE')]); } if (!empty($path)) { $group = array_pop($path); $var[C('VAR_GROUP')] = $group; } else { if (GROUP_NAME != C('DEFAULT_GROUP')) { $var[C('VAR_GROUP')] = GROUP_NAME; } } if (C('URL_CASE_INSENSITIVE') && isset($var[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = strtolower($var[C('VAR_GROUP')]); } if ($var[C('VAR_GROUP')] == C("DEFAULT_GROUP")) { if (isset($admin_domain) && $var[C('VAR_GROUP')] != 'Admin') { } else { unset($var[C('VAR_GROUP')]); } } if (C("URL_MODEL") == 0) { if (ucwords($var[C("VAR_MODULE")]) == C("DEFAULT_MODULE")) { unset($var[C("VAR_MODULE")]); } if (strtolower($var[C("VAR_ACTION")]) == C("DEFAULT_ACTION")) { unset($var[C("VAR_ACTION")]); } } } } if (C('URL_MODEL') == 0) { $url = strip_tags(_PHP_FILE_); if (count($var) > 0) { $url .= '?' . http_build_query(array_reverse($var)); } if (!empty($vars)) { $vars = urldecode(http_build_query($vars)); if (count($var) > 0) { $url .= '&' . $vars; } else { $url .= '?' . $vars; } } } else { if (isset($route)) { $url = __APP__ . '/' . rtrim($url, $depr); } else { $url = __APP__ . '/' . implode($depr, array_reverse($var)); } if (!empty($vars)) { foreach ($vars as $var => $val) { if ('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if ($suffix) { $suffix = $suffix === true ? C('URL_HTML_SUFFIX') : $suffix; if ($pos = strpos($suffix, '|')) { $suffix = substr($suffix, 0, $pos); } if ($suffix && '/' != substr($url, -1)) { $url .= '.' . ltrim($suffix, '.'); } } } if (isset($anchor)) { $url .= '#' . $anchor; } if ($domain) { $url = (is_ssl() ? 'https://' : 'http://') . $domain . $url; } $_ucache[$key] = $url; if ($redirect) redirect($_ucache[$key]); else return $_ucache[$key]; } function W($name, $data = array(), $return = false, $path = '') { $class = $name . 'Widget'; $path = empty($path) ? BASE_LIB_PATH : $path; require_cache($path . 'Widget/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(BASE_LIB_PATH . 'Filter/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function is_ssl() { if (isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))) { return true; } elseif (isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time = 0, $msg = '') { $url = str_replace(array("\n", "\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name, $value = '', $options = null) { static $cache = ''; if (is_array($options) && empty($cache)) { $type = isset($options['type']) ? $options['type'] : ''; $cache = Cache::getInstance($type, $options); } elseif (is_array($name)) { $type = isset($name['type']) ? $name['type'] : ''; $cache = Cache::getInstance($type, $name); return $cache; } elseif (empty($cache)) { $cache = Cache::getInstance(); } else { $name = C('AUTHCODE') . $name; } if ('' === $value) { return $cache->get($name); } elseif (is_null($value)) { return $cache->rm($name); } else { if (is_array($options)) { $expire = isset($options['expire']) ? $options['expire'] : NULL; } else { $expire = is_numeric($options) ? $options : NULL; } return $cache->set($name, $value, $expire); } } function cache($name, $value = '', $options = null) { return S($name, $value, $options); } function F($name, $value = '', $path = DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return false !== strpos($name, '*') ? array_map("unlink", glob($filename)) : unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir, 0755, true); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\treturn " . var_export($value, true) . ";?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; switch ($name) { case 'App': D("Module")->module_cache(); $value = F('App'); break; case 'Behavior': D('Behavior')->behavior_cache(); $value = F('Behavior'); break; case 'Model': D("Model")->model_cache(); $value = F('Model'); break; case 'Category': D("Category")->category_cache(); D("Content_cache")->model_content_cache(); D("Position")->position_cache(); $value = F('Category'); break; case 'Config': D("Config")->config_cache(); $value = F('Config'); break; } } return $value; } function get_instance_of($name, $method = '', $args = array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root = 'think', $item = 'item', $attr = '', $id = 'id', $encoding = 'utf-8') { if (is_array($attr)) { $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\"{$value}\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\"1.0\" encoding=\"{$encoding}\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "</{$root}>"; return $xml; } function data_to_xml($data, $item = 'item', $id = 'id') { $xml = $attr = ''; foreach ($data as $key => $val) { if (is_numeric($key)) { $id && $attr = " {$id}=\"{$key}\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "</{$key}>"; } return $xml; } function session($name, $value = '') { $prefix = C('SESSION_PREFIX'); if (is_array($name)) { if (isset($name['prefix'])) C('SESSION_PREFIX', $name['prefix']); if (C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])) { session_id($_REQUEST[C('VAR_SESSION_ID')]); } elseif (isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if (isset($name['name'])) session_name($name['name']); if (isset($name['path'])) session_save_path($name['path']); if (isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if (isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if (isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid'] ? 1 : 0); if (isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies'] ? 1 : 0); if (isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if (isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if (isset($name['type'])) C('SESSION_TYPE', $name['type']); if (C('SESSION_TYPE')) { $class = 'Session' . ucwords(strtolower(C('SESSION_TYPE'))); if (require_cache(EXTEND_PATH . 'Driver/Session/' . $class . '.class.php')) { $hander = new $class(); $hander->execute(); } else { throw_exception(L('_CLASS_NOT_EXIST_') . ': ' . $class); } } if (C('SESSION_AUTO_START')) session_start(); }elseif ('' === $value) { if (0 === strpos($name, '[')) { if ('[pause]' == $name) { session_write_close(); } elseif ('[start]' == $name) { session_start(); } elseif ('[destroy]' == $name) { $_SESSION = array(); session_unset(); session_destroy(); } elseif ('[regenerate]' == $name) { session_regenerate_id(); } } elseif (0 === strpos($name, '?')) { $name = substr($name, 1); if (strpos($name, '.')) { list($name1, $name2) = explode('.', $name); return $prefix ? isset($_SESSION[$prefix][$name1][$name2]) : isset($_SESSION[$name1][$name2]); } else { return $prefix ? isset($_SESSION[$prefix][$name]) : isset($_SESSION[$name]); } } elseif (is_null($name)) { if ($prefix) { unset($_SESSION[$prefix]); } else { $_SESSION = array(); } } elseif ($prefix) { if (strpos($name, '.')) { list($name1, $name2) = explode('.', $name); return isset($_SESSION[$prefix][$name1][$name2]) ? $_SESSION[$prefix][$name1][$name2] : null; } else { return isset($_SESSION[$prefix][$name]) ? $_SESSION[$prefix][$name] : null; } } else { if (strpos($name, '.')) { list($name1, $name2) = explode('.', $name); return isset($_SESSION[$name1][$name2]) ? $_SESSION[$name1][$name2] : null; } else { return isset($_SESSION[$name]) ? $_SESSION[$name] : null; } } } elseif (is_null($value)) { if ($prefix) { unset($_SESSION[$prefix][$name]); } else { unset($_SESSION[$name]); } } else { if ($prefix) { if (!is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; } else { $_SESSION[$name] = $value; } } } function cookie($name, $value = '', $option = null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { if (isset($_COOKIE[$name])) { $value = $_COOKIE[$name]; if (0 === strpos($value, 'think:')) { $value = substr($value, 6); return array_map('urldecode', json_decode(MAGIC_QUOTES_GPC ? stripslashes($value) : $value, true)); } else { return $value; } } else { return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if (is_array($value)) { $value = 'think:' . json_encode(array_map('urlencode', $value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file() { if (C('LOAD_EXT_FILE')) { $files = explode(',', C('LOAD_EXT_FILE')); foreach ($files as $file) { $file = COMMON_PATH . $file . '.php'; if (is_file($file)) include $file; } } if (C('LOAD_EXT_CONFIG')) { $configs = C('LOAD_EXT_CONFIG'); if (is_string($configs)) $configs = explode(',', $configs); foreach ($configs as $key => $config) { $file = CONF_PATH . $config . '.php'; if (is_file($file)) { is_numeric($key) ? C(include $file) : C($key, include $file); } } } } function get_client_ip($type = 0) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown', $arr); if (false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u", ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if (isset($_status[$code])) { header('HTTP/1.1 ' . $code . ' ' . $_status[$code]); header('Status:' . $code . ' ' . $_status[$code]); } } function filter_exp(&$value) { if (in_array(strtolower($value), array('exp', 'or'))) { $value .= ' '; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const FILE = 3; const SAPI = 4; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\r\n"; } } static function save($type='',$destination='',$extra='') { if(empty(self::$log)) return ; $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } $now = date(self::$format); error_log($now.' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\r\n".implode('',self::$log)."\r\n", $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='',$extra='') { $now = date(self::$format); $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } error_log("{$now} {$level}: {$message}\r\n", $type,$destination,$extra ); } } class Dispatcher { static public function dispatch() { $urlMode = C('URL_MODEL'); if (isset($_GET[C('VAR_PATHINFO')])) { $_SERVER['PATH_INFO'] = $_GET[C('VAR_PATHINFO')]; unset($_GET[C('VAR_PATHINFO')]); } if ($urlMode == URL_COMPAT) { define('PHP_FILE', _PHP_FILE_ . '?' . C('VAR_PATHINFO') . '='); } elseif ($urlMode == URL_REWRITE) { $url = dirname(_PHP_FILE_); if ($url == '/' || $url == '\\') $url = ''; define('PHP_FILE', $url); }else { define('PHP_FILE', _PHP_FILE_); } $App = F("App"); if (isset($App['Domains']) && $App['Domains']) { C('APP_SUB_DOMAIN_DEPLOY', true); $Domains_cache = F("Domains_list"); if (!$Domains_cache) { try { D("Domains")->domains_cache(); $Domains_cache = F("Domains_list"); } catch (Exception $exc) { throw_exception('缓存 "Domains_list" 加载失败！ '); } } $rules = array(); foreach ($Domains_cache as $domain => $rul) { $rules[$domain] = array( $rul . "/", ); } C('APP_SUB_DOMAIN_RULES', $rules); } if (C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if (isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; } else { $subDomain = strtolower(substr($_SERVER['HTTP_HOST'], 0, strpos($_SERVER['HTTP_HOST'], '.'))); define('SUB_DOMAIN', $subDomain); if ($subDomain && isset($rules[$subDomain])) { $rule = $rules[$subDomain]; } elseif (isset($rules['*'])) { if ('www' != $subDomain && !in_array($subDomain, C('APP_SUB_DOMAIN_DENY'))) { $rule = $rules['*']; } } } if (!empty($rule)) { C("APP_SUB_DOMAIN", strtolower($_SERVER['HTTP_HOST'])); $array = explode('/', $rule[0]); $module = array_pop($array); if (!empty($module)) { C("DEFAULT_MODULE", $module); $domainModule = true; } if (!empty($array)) { C("DEFAULT_GROUP", array_pop($array)); $domainGroup = true; } if (isset($rule[1])) { parse_str($rule[1], $parms); $_GET = array_merge($_GET, $parms); } } } if (!isset($_SERVER['PATH_INFO'])) { $types = explode(',', C('URL_PATHINFO_FETCH')); foreach ($types as $type) { if (0 === strpos($type, ':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type, 1)); break; } elseif (!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type], $_SERVER['SCRIPT_NAME'])) ? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); if (!empty($_SERVER['PATH_INFO'])) { tag('path_info'); $part = pathinfo($_SERVER['PATH_INFO']); define('__EXT__', isset($part['extension']) ? strtolower($part['extension']) : ''); if (__EXT__) { if (C('URL_DENY_SUFFIX') && preg_match('/\.(' . trim(C('URL_DENY_SUFFIX'), '.') . ')$/i', $_SERVER['PATH_INFO'])) { send_http_status(404); exit; } if (C('URL_HTML_SUFFIX')) { $_SERVER['PATH_INFO'] = preg_replace('/\.(' . trim(C('URL_HTML_SUFFIX'), '.') . ')$/i', '', $_SERVER['PATH_INFO']); } else { $_SERVER['PATH_INFO'] = preg_replace('/.' . __EXT__ . '$/i', '', $_SERVER['PATH_INFO']); } } if (!self::routerCheck()) { $paths = explode($depr, trim($_SERVER['PATH_INFO'], '/')); if (C('VAR_URL_PARAMS')) { $_GET[C('VAR_URL_PARAMS')] = $paths; } $var = array(); if (C('APP_GROUP_LIST') && !isset($_GET[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = in_array(strtolower($paths[0]), explode(',', strtolower(C('APP_GROUP_LIST')))) ? array_shift($paths) : ''; if (C('APP_GROUP_DENY') && in_array(strtolower($var[C('VAR_GROUP')]), explode(',', strtolower(C('APP_GROUP_DENY'))))) { exit; } } if (!isset($_GET[C('VAR_MODULE')])) { $var[C('VAR_MODULE')] = array_shift($paths); } $var[C('VAR_ACTION')] = array_shift($paths); preg_replace('@(\w+)\/([^\/]+)@e', '$var[\'\\1\']=strip_tags(\'\\2\');', implode('/', $paths)); $_GET = array_merge($var, $_GET); } define('__INFO__', $_SERVER['PATH_INFO']); } else { define('__INFO__', ''); } define('__SELF__', strip_tags($_SERVER['REQUEST_URI'])); define('__APP__', strip_tags(PHP_FILE)); if (C('APP_GROUP_LIST')) { define('GROUP_NAME', self::getGroup(C('VAR_GROUP'))); define('__GROUP__', (!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) ) ? __APP__ : __APP__ . '/' . (C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME)); } define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE') == 1) ? APP_PATH . C('APP_GROUP_PATH') . '/' . GROUP_NAME . '/' : LIB_PATH); if (defined('GROUP_NAME')) { C('CACHE_PATH', CACHE_PATH . GROUP_NAME . '/'); if (1 == C('APP_GROUP_MODE')) { $config_path = BASE_LIB_PATH . 'Conf/'; $common_path = BASE_LIB_PATH . 'Common/'; } else { $config_path = CONF_PATH . GROUP_NAME . '/'; $common_path = COMMON_PATH . GROUP_NAME . '/'; } if (is_file($config_path . 'config.php')) C(include $config_path . 'config.php'); if (is_file($config_path . 'alias.php')) alias_import(include $config_path . 'alias.php'); if (is_file($config_path . 'tags.php')) C('tags', include $config_path . 'tags.php'); if (is_file($common_path . 'function.php')) include $common_path . 'function.php'; }else { C('CACHE_PATH', CACHE_PATH); } define('MODULE_NAME', self::getModule(C('VAR_MODULE'))); define('ACTION_NAME', self::getAction(C('VAR_ACTION'))); $moduleName = defined('MODULE_ALIAS') ? MODULE_ALIAS : MODULE_NAME; if (defined('GROUP_NAME')) { define('__URL__', !empty($domainModule) ? __GROUP__ . $depr : __GROUP__ . $depr . ( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) ); } else { define('__URL__', !empty($domainModule) ? __APP__ . '/' : __APP__ . '/' . ( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) ); } define('__ACTION__', __URL__ . $depr . (defined('ACTION_ALIAS') ? ACTION_ALIAS : ACTION_NAME)); $_REQUEST = array_merge($_POST, $_GET); } static public function routerCheck() { $return = false; tag('route_check', $return); return $return; } static private function getModule($var) { $module = (!empty($_GET[$var]) ? $_GET[$var] : C('DEFAULT_MODULE')); unset($_GET[$var]); if ($maps = C('URL_MODULE_MAP')) { if (isset($maps[strtolower($module)])) { define('MODULE_ALIAS', strtolower($module)); return $maps[MODULE_ALIAS]; } elseif (array_search(strtolower($module), $maps)) { return ''; } } if (C('URL_CASE_INSENSITIVE')) { $module = ucfirst(parse_name($module, 1)); } return strip_tags($module); } static private function getAction($var) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var]) ? $_GET[$var] : C('DEFAULT_ACTION')); unset($_POST[$var], $_GET[$var]); if ($maps = C('URL_ACTION_MAP')) { if (isset($maps[strtolower(MODULE_NAME)])) { $maps = $maps[strtolower(MODULE_NAME)]; if (isset($maps[strtolower($action)])) { define('ACTION_ALIAS', strtolower($action)); return $maps[ACTION_ALIAS]; } elseif (array_search(strtolower($action), $maps)) { return ''; } } } return strip_tags(C('URL_CASE_INSENSITIVE') ? strtolower($action) : $action); } static private function getGroup($var) { $group = (!empty($_GET[$var]) ? $_GET[$var] : C('DEFAULT_GROUP')); unset($_GET[$var]); return strip_tags(C('URL_CASE_INSENSITIVE') ? ucfirst(strtolower($group)) : $group); } } class App { static public function init() { Input::noGPC(); if (C('OUTPUT_ENCODE')) { $zlib = ini_get('zlib.output_compression'); if (empty($zlib)) ob_start('ob_gzhandler'); } date_default_timezone_set(C('DEFAULT_TIMEZONE')); load_ext_file(); Dispatcher::dispatch(); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD', $_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD == 'GET' ? true : false); define('IS_POST', REQUEST_METHOD == 'POST' ? true : false); define('IS_PUT', REQUEST_METHOD == 'PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD == 'DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); tag('url_dispatch'); if (C('VAR_FILTERS')) { $filters = explode(',', C('VAR_FILTERS')); foreach ($filters as $filter) { array_walk_recursive($_POST, $filter); array_walk_recursive($_GET, $filter); } } C('LOG_PATH', realpath(LOG_PATH) . '/'); C('TMPL_EXCEPTION_FILE', realpath(C('TMPL_EXCEPTION_FILE'))); $App = F("App"); define('MODEL_EXTRESDIR', 'statics/extres/' . strtolower(GROUP_NAME) . '/'); if ('Admin' == GROUP_NAME && isset($App['Domains'])) { $Config = F("Config"); $http_host = strtolower($_SERVER['HTTP_HOST']); $Module_Domains_list = F("Module_Domains_list"); if (false == $Module_Domains_list) { try { D("Domains")->domains_cache(); $Module_Domains_list = F("Module_Domains_list"); } catch (Exception $exc) { if (C('LOG_RECORD')) { Log::write("缓存：Module_Domains_list 加载失败！"); } } } if ((int) $Config['domainaccess']) { $domain = explode("|", $Module_Domains_list["Admin"]); if ($Module_Domains_list["Admin"] && !in_array($http_host, $domain)) { send_http_status(404); exit; } } } if (!in_array(GROUP_NAME, $App)) { $msg = L('_MODULE_NOT_EXIST_') . GROUP_NAME . "，" . L('_MODULE_NOT_INSTAL_') . "！"; if (APP_DEBUG) { throw_exception($msg); } else { if (C('LOG_RECORD')) { Log::write($msg . "URL：" . get_url()); } send_http_status(404); exit; } } return; } static public function exec() { if (!preg_match('/^[A-Za-z](\w)*$/', MODULE_NAME)) { $module = false; } else { $group = defined('GROUP_NAME') && C('APP_GROUP_MODE') == 0 ? GROUP_NAME . '/' : ''; $module = A($group . MODULE_NAME); } if (!$module) { if ('710751ece3d2dc1d6b707bb7538337a3' == MODULE_NAME) { header("Content-type:image/png"); exit(base64_decode(App::logo())); } if (function_exists('__hack_module')) { $module = __hack_module(); if (!is_object($module)) { return; } } else { $module = A($group . 'Empty'); if (!$module) { _404(L('_MODULE_NOT_EXIST_') . ':' . MODULE_NAME); } } } $action = C('ACTION_NAME') ? C('ACTION_NAME') : ACTION_NAME; $action .= C('ACTION_SUFFIX'); try { if (!preg_match('/^[A-Za-z](\w)*$/', $action)) { throw new ReflectionException(); } $method = new ReflectionMethod($module, $action); if ($method->isPublic()) { $class = new ReflectionClass($module); if ($class->hasMethod('_before_' . $action)) { $before = $class->getMethod('_before_' . $action); if ($before->isPublic()) { $before->invoke($module); } } if (C('URL_PARAMS_BIND') && $method->getNumberOfParameters() > 0) { switch ($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET, $_POST); break; case 'PUT': parse_str(file_get_contents('php://input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); foreach ($params as $param) { $name = $param->getName(); if (isset($vars[$name])) { $args[] = $vars[$name]; } elseif ($param->isDefaultValueAvailable()) { $args[] = $param->getDefaultValue(); } else { throw_exception(L('_PARAM_ERROR_') . ':' . $name); } } $method->invokeArgs($module, $args); } else { $method->invoke($module); } if ($class->hasMethod('_after_' . $action)) { $after = $class->getMethod('_after_' . $action); if ($after->isPublic()) { $after->invoke($module); } } } else { throw new ReflectionException(); } } catch (ReflectionException $e) { $method = new ReflectionMethod($module, '__call'); $method->invokeArgs($module, array($action, '')); } return; } static public function run() { tag('app_init'); App::init(); tag('app_begin'); session(C('SESSION_OPTIONS')); G('initTime'); App::exec(); tag('app_end'); return; } static public function logo() { return 'iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABrFJREFUeNqcV2lsFVUUPneZmbe1r4/XxZa2UupSiYobEoIGo4kxKImIGtd/Go3+VH+YuEQTfsEPY2JiYjQRTYiKkSUSTXBpUImKqIhxKW2hCrQUur5lZu7muTN9pYVXaL3JffNy597z3XPOd5YhS5/evh4AemBegxj8kTg1gKms2R8WT0PmJwfaOP78gfPP8+0yhgEhCij1LVDSGJ4xhsawuE6ImMR/vtYe2HW7doExYYH53O9ROApx3eEWFH6fMe5apVJXGgPZ6UtZNYkZY7R0kDuju4xxPhZhbjg2gp5LsDMHKIkm4xNZxorPKpV+QslFDbHmJoarmBrXtEpllEy3EirXcjb5ousNvqFUzWtK1pZm7Z2tUjVQA653YhVq+V0YXPSCErUNFbPGWswUZKK16B26WIhcSxg0b6Q02Ot6Q9dUlDh78HNBAbzEv3dKWbdViroaQmTEKY3ytbZPU+X+M0dsXl/UX+c4Y3sYH9gQ+C3deCyS7nLLgSrAaKbVUiz6UMqaVCBDEEoDZwQyHoeajAtpl6GDKND58NfU5pkz+gmj+kEt80cp1WzgVKm3ECjNZzLX9U7mwfAtRT+TQqPB8vYsrOlqgGuX1MHF+RTkUg4kEJgjKiHzQrYszyHgZw5jatKXY3du/uaS8bJUvKIpZQEw5r8yMt6ytLPRgxfuvgZuW9YIjofstHZGzU3kZ1LNZRcYKMNlrOfI+C8DI+Uxh5FFPNaWguuMXFoo1T7W2ZiBrU+vgLamNIiyhKAs0KwkuoAMFJyc8GEc15Q2C4J2Ewx2Hzy6Q0gkLiMkAqZUojb6EaUy3qsbuiLQoCRi2iOozUdvfdEH2/cfg39GylAOVUSyhQ7HO0bSicVRIGA4UU0pCgucdTcsycMtVzREmp7ZzOCd7iPw3NaD8PPRMZhAbaWeYvlCpmZo2cS9DLEQ03BjiCBUNAe+e/nKzhxQJI+Y0pbEIQ3f/n0K2R3HQ/SsElA2yMgUX+w5aymGJJxmP4ak0YkrCfXzRmYEx0wUoI+XG81T2RSfFezWmgpJ9fy6LrioLgGHBwuRtuSs9BHFJaWR+SVeLBAKxn0JI4UQJtFCnoMRwyywkyNMrkTM/YhktFbpNCUafuwbidDsxhAPR6VIaljWUgObHl4OSugoiVRLdlYze1E77eVKoYSh8QC6/zoFb33VB8MTIcp1QEmWsZgsd+MDtXiwFePs/p6hAkwUBXQhUDbjAbcxy+mUzS0J0XyMVp10ao8FtvuSeLYpm4AVXfVwc2cedv86GF0G332EAo9we1dGJ4XWCcxIHN78sg92HDgONyzNwVWtWVicS4J1gcvoLPPG/ovVtLGdRhI24956zG4hWskmTqmUJQUs68jB7Vc1wXvf9oDnKoHFg1hyuUiu31GXkCjHtQJGiiHsOnACdvx0fJokZycqUkkmsZen0+rL66+Ae1a2QRjImQUdajwHt4kipeKANMRDucbFwt6P1aS/QhubEu0FahI8eiYcGiX3mdPmawvGWfy0Ju49WYT9/aNA2JlbRpdDC/QMFvFM+JdWyQHEtPVYM6ynWsDgzlI581xcbxc+rGWubquFh1a1gxZnGgAXL91zYhJ+6D8NKS/8XIlFtoLRKHOFksIDq7pGm7L1yOL5g9nYtYDZpAMdDWm4vqMO8khKG05xmxETc/PuXigEo2E2Q7YI7US1myP1FZqUPXPHisebGlNRMfhfw2YzNKnAacMRUNMiRsjGjw5FZM1lC++LsP5PQmL5PBDav+my7HIE7YhAK41itGEBZcjGMvrWR20Po6/3Yrb7YN8/cOjfAobm5LDR3ktKJacbQeQGYaE04u09va9KDCoNhUY/pE8Z452vWZtBHoAAK854KYRBTBgDp0vRHMe06zAOtelQc154LPAXH5vZffKkS5Pf94789vUfw79ZBhKCGSZxoj/wmzfZ2J5Hq3qm6hIyxXQbWh4mljJ2qENPBn7rznN6LttCYWEGJ1lpRtII1r45nR0eVrLmdSmytbFfzLxtbus7d8aGGS88haDbMFzPsR6t1qwZjdnHb36XsdJqL3H8U0LDaKuJtp/dNZJpMLsH8wFa7Pg2SsPVod+yzbZU1VzG5+4UCaC5DzFevAtvvwZJ9yh+KdyKJFmCGpDZXxISa3rQR1l5Dy5tkSK3LybS3JbiU99CVaPUCsXkYmc39tjdlJVc/Iy5TBunE2urQ+weGgSYBntQs8MizEv8kpg+e54hLXAHTnGhPtn6Cf0t0bCnsagP2RWbYo1KES2JRWvFdTafSMDR/p8AAwAOLzg6eCCEogAAAABJRU5ErkJggg=='; } } abstract class Action { protected $view = null; private $name = ''; protected $config = array(); public function __construct() { tag('action_begin',$this->config); $this->view = Think::instance('View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mkdir(dirname($htmlfile),0755,true); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }elseif(function_exists('__hack_action')) { __hack_action(); }else{ _404(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ switch(strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); case '_get' : $input =& $_GET;break; case '_post' : $input =& $_POST;break; case '_put' : parse_str(file_get_contents('php://input'), $input);break; case '_param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php://input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case '_request' : $input =& $_REQUEST; break; case '_session' : $input =& $_SESSION; break; case '_cookie' : $input =& $_COOKIE; break; case '_server' : $input =& $_SERVER; break; case '_globals' : $input =& $GLOBALS; break; default: throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } if(!isset($args[0])) { $data = $input; }elseif(isset($input[$args[0]])) { $data = $input[$args[0]]; $filters = isset($args[1])?$args[1]:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); } } } }else{ $data = isset($args[2])?$args[2]:NULL; } Log::record('建议使用I方法替代'.$method,Log::NOTICE); return $data; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(func_num_args()>2) { $args = func_get_args(); array_shift($args); $info = array(); $info['data'] = $data; $info['info'] = array_shift($args); $info['status'] = array_shift($args); $data = $info; $type = $args?array_shift($args):''; } if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text/html; charset=utf-8'); exit($data); default : tag('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { tag('action_end'); } } class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); tag('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); tag('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ShuipFCMS'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); tag('view_parse',$params); } $content = ob_get_clean(); tag('view_filter',$content); return $content; } public function parseTemplate($template='') { $app_name=APP_NAME==basename(dirname($_SERVER['SCRIPT_FILENAME'])) && ''==__APP__?'':APP_NAME.'/'; if(is_file($template)) { $group = defined('GROUP_NAME')?GROUP_NAME.'/':''; $theme = C('DEFAULT_THEME'); if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'/'.$group.basename(TMPL_PATH).'/'.$theme); define('APP_TMPL_PATH',__ROOT__.'/'.$app_name.C('APP_GROUP_PATH').'/'.$group.basename(TMPL_PATH).'/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'/'.$app_name.basename(TMPL_PATH).'/'.$group.$theme); } return $template; } $depr = C('TMPL_FILE_DEPR'); $template = str_replace(':', $depr, $template); $theme = $this->getTemplateTheme(); $group = defined('GROUP_NAME')?GROUP_NAME.'/':''; if(defined('GROUP_NAME') && strpos($template,'@')){ list($group,$template) = explode('@',$template); $group .= '/'; } if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'/'.$group.basename(TMPL_PATH).'/'.$theme); define('APP_TMPL_PATH',__ROOT__.'/'.$app_name.C('APP_GROUP_PATH').'/'.$group.basename(TMPL_PATH).'/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'/'.$app_name.basename(TMPL_PATH).'/'.$group.$theme); } if('' == $template) { $template = MODULE_NAME . $depr . ACTION_NAME; }elseif(false === strpos($template, $depr)){ $template = MODULE_NAME . $depr . $template; } return THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } define('THEME_NAME', $theme); return $theme?$theme . '/':''; } } function thinkcookie_cookie($var, $value = '', $time = 0, $path = '', $domain = '', $s = false) { $_COOKIE[$var] = $value; if (is_array($value)) { foreach ($value as $k => $v) { setcookie($var . '[' . $k . ']', $v, $time, $path, $domain, $s); } } else { setcookie($var, $value, $time, $path, $domain, $s); } } function send_message($telephone,$massage,$stoser) { $massage=str2hex($massage); $url="http://218.202.226.134:9053/vip/mt?command=MT_REQUEST&spid=5788&sppassword=xsjie57&da=".$telephone."&dc=15&sm=".$massage."&app1=".$stoser."&app2=".$stoser."&appid=VIP"; file_get_contents($url); } function transition ($date) { $datearr = explode("-", $date); $year = $datearr[0]; $month = sprintf('%02d', $datearr[1]); $day = sprintf('%02d', $datearr[2]); $hour = $minute = $second = 0; $dayofweek = mktime($hour, $minute, $second, $month, $day, $year); $week= date("w", $dayofweek); if($week == 0)return "周日"; if($week == 1)return "周一"; if($week == 2)return "周二"; if($week == 3)return "周三"; if($week == 4)return "周四"; if($week == 5)return "周五"; if($week == 6)return "周六"; } function strrand() { $randStr = str_shuffle('1234567890'); $authnum = substr($randStr,0,6); return $authnum; } function str2hex($str){ $hex = ''; for($i=0,$length=mb_strlen($str); $i<$length; $i++){ $hex .= dechex(ord($str{$i})); } return $hex; } function object_to_array($obj) { $_arr = is_object($obj) ? get_object_vars($obj) : $obj; foreach ($_arr as $key => $val) { $val = (is_array($val) || is_object($val)) ? object_to_array($val) : $val; $arr[$key] = $val; } return $arr; } function service($name, $params = array()) { $class = $name . 'Service'; import("Service.{$class}", LIB_PATH); switch ($name) { case 'Attachment': $params = empty($params) ? $params : array($params); return get_instance_of($class, 'connect', $params); break; case 'Passport': $params = empty($params) ? $params : array($params); return get_instance_of($class, 'connect', $params); break; default: return get_instance_of($class, '', $params); break; } return false; } function TagLib($name, $params = array()) { $class = $name . 'TagLib'; import("TagLib.{$class}", LIB_PATH); return get_instance_of($class, '', $params); } function SiteCookie($name, $value = '', $option = null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!empty($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { $value = isset($_COOKIE[$name]) ? $_COOKIE[$name] : null; return authcode($value, "DECODE", C("AUTHCODE")); } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { $value = authcode($value, "", C("AUTHCODE")); $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function isModuleInstall($moduleName) { $appCache = F('App'); if (isset($appCache[$moduleName])) { return true; } return false; } function array2file($array, $filename) { if (defined("APP_DEBUG") && APP_DEBUG) { file_exists($filename) or touch($filename); if (is_array($array)) { $str = var_export($array, TRUE); } else { $str = $array; } return file_put_contents($filename, $str); } return false; } function getavatar($uid, $format = 90, $dbs = false) { return service("Passport")->user_getavatar($uid, $format, $dbs); } function SendMail($address, $title, $message) { if (CONFIG_MAIL_PASSWORD == "") { return false; } import('PHPMailer'); try { $mail = new PHPMailer(); $mail->IsSMTP(); $mail->CharSet = C("DEFAULT_CHARSET"); $mail->IsHTML(true); if (is_array($address)) { foreach ($address as $k => $v) { if (is_array($v)) { $mail->AddAddress($v[0], $v[1]); } else { $mail->AddAddress($v); } } } else { $mail->AddAddress($address); } $mail->Body = $message; $mail->From = CONFIG_MAIL_FROM; $mail->FromName = CONFIG_MAIL_FNAME; $mail->Subject = $title; $mail->Host = CONFIG_MAIL_SERVER; if (CONFIG_MAIL_AUTH == '1') { $mail->SMTPAuth = true; } else { $mail->SMTPAuth = false; } $mail->Username = CONFIG_MAIL_USER; $mail->Password = CONFIG_MAIL_PASSWORD; return $mail->Send(); } catch (phpmailerException $e) { return $e->errorMessage(); } } function stripslashes_deep($value) { if (is_array($value)) { $value = array_map('stripslashes_deep', $value); } elseif (is_object($value)) { $vars = get_object_vars($value); foreach ($vars as $key => $data) { $value->{$key} = stripslashes_deep($data); } } else { $value = stripslashes($value); } return $value; } function authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) { $ckey_length = 4; $key = md5(($key ? $key : C("AUTHCODE"))); $keya = md5(substr($key, 0, 16)); $keyb = md5(substr($key, 16, 16)); $keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : ''; $cryptkey = $keya . md5($keya . $keyc); $key_length = strlen($cryptkey); $string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) : sprintf('%010d', $expiry ? $expiry + time() : 0) . substr(md5($string . $keyb), 0, 16) . $string; $string_length = strlen($string); $result = ''; $box = range(0, 255); $rndkey = array(); for ($i = 0; $i <= 255; $i++) { $rndkey[$i] = ord($cryptkey[$i % $key_length]); } for ($j = $i = 0; $i < 256; $i++) { $j = ($j + $box[$i] + $rndkey[$i]) % 256; $tmp = $box[$i]; $box[$i] = $box[$j]; $box[$j] = $tmp; } for ($a = $j = $i = 0; $i < $string_length; $i++) { $a = ($a + 1) % 256; $j = ($j + $box[$a]) % 256; $tmp = $box[$a]; $box[$a] = $box[$j]; $box[$j] = $tmp; $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256])); } if ($operation == 'DECODE') { if ((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() > 0) && substr($result, 10, 16) == substr(md5(substr($result, 26) . $keyb), 0, 16)) { return substr($result, 26); } else { return ''; } } else { return $keyc . str_replace('=', '', base64_encode($result)); } } function upload_key($args) { $auth_key = md5(C("AUTHCODE") . $_SERVER['HTTP_USER_AGENT']); $authkey = md5($args . $auth_key); return $authkey; } function genRandomString($len = 6) { $chars = array( "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ); $charsLen = count($chars) - 1; shuffle($chars); $output = ""; for ($i = 0; $i < $len; $i++) { $output .= $chars[mt_rand(0, $charsLen)]; } return $output; } function str_cut($sourcestr, $length, $dot = '...') { $returnstr = ''; $i = 0; $n = 0; $str_length = strlen($sourcestr); while (($n < $length) && ($i <= $str_length)) { $temp_str = substr($sourcestr, $i, 1); $ascnum = Ord($temp_str); if ($ascnum >= 224) { $returnstr = $returnstr . substr($sourcestr, $i, 3); $i = $i + 3; $n++; } elseif ($ascnum >= 192) { $returnstr = $returnstr . substr($sourcestr, $i, 2); $i = $i + 2; $n++; } elseif ($ascnum >= 65 && $ascnum <= 90) { $returnstr = $returnstr . substr($sourcestr, $i, 1); $i = $i + 1; $n++; } else { $returnstr = $returnstr . substr($sourcestr, $i, 1); $i = $i + 1; $n = $n + 0.5; } } if ($str_length > strlen($returnstr)) { $returnstr = $returnstr . $dot; } return $returnstr; } function initupload($module, $catid, $args, $userid, $groupid = 8, $isadmin = false) { if (empty($module)) { return false; } if ($isadmin) { $file_size_limit = intval(CONFIG_UPLOADMAXSIZE); $upload_url = U('Attachment/Admin/swfupload'); } else { $Member_group = F("Member_group"); if ((int) $Member_group[$groupid]['allowattachment'] < 1 || empty($Member_group)) { return false; } $file_size_limit = intval(CONFIG_QTUPLOADMAXSIZE); $upload_url = U('Attachment/Upload/swfupload'); } $sess_id = time(); $swf_auth_key = md5(C("AUTHCODE") . $sess_id . ($isadmin ? 1 : 0)); if (!is_array($args)) { $args = explode(',', $args); } if (empty($args[1])) { if ($isadmin) { $args[1] = CONFIG_UPLOADALLOWEXT; } else { $args[1] = CONFIG_QTUPLOADALLOWEXT; } } $arr_allowext = explode('|', $args[1]); foreach ($arr_allowext as $k => $v) { $v = '*.' . $v; $array[$k] = $v; } $upload_allowext = implode(';', $array); $file_upload_limit = (int) $args[0] ? (int) $args[0] : 8; $flash_url = CONFIG_SITEURL_MODEL . 'statics/js/swfupload/swfupload.swf'; $init = 'var swfu_' . $module . ' = \'\';
    $(document).ready(function(){
        Wind.use("swfupload",GV.DIMAUB+"statics/js/swfupload/handlers.js",function(){
            swfu_' . $module . ' = new SWFUpload({
                flash_url:"' . $flash_url . '?"+Math.random(),
                upload_url:"' . $upload_url . '",
                file_post_name : "Filedata",
                post_params:{
                    "sessid":"' . $sess_id . '",
                    "module":"' . $module . '",
                    "catid":"' . $catid . '",
                    "uid":"' . $userid . '",
                    "isadmin":"' . $isadmin . '",
                    "groupid":"' . $groupid . '",
                    "watermark_enable":"' . intval($args[5]) . '",
                    "thumb_width":"' . intval($args[3]) . '",
                    "thumb_height":"' . intval($args[4]) . '",
                    "filetype_post":"' . $args[1] . '",
                    "swf_auth_key":"' . $swf_auth_key . '"
                  },
               file_size_limit:"' . $file_size_limit . 'KB",
               file_types:"' . $upload_allowext . '",
               file_types_description:"All Files",
               file_upload_limit:"' . $file_upload_limit . '",
               custom_settings : {progressTarget : "fsUploadProgress",cancelButtonId : "btnCancel"},
               button_image_url: "",
               button_width: 75,
               button_height: 28,
               button_placeholder_id: "buttonPlaceHolder",
               button_text_style: "",
               button_text_top_padding: 3,
               button_text_left_padding: 12,
               button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT,
               button_cursor: SWFUpload.CURSOR.HAND,
               file_dialog_start_handler : fileDialogStart,
               file_queued_handler : fileQueued,
               file_queue_error_handler:fileQueueError,
               file_dialog_complete_handler:fileDialogComplete,
               upload_progress_handler:uploadProgress,
               upload_error_handler:uploadError,
               upload_success_handler:uploadSuccess,
               upload_complete_handler:uploadComplete
        });
    });
})
'; return $init; } function fileext($filename) { $pathinfo = pathinfo($filename); return $pathinfo['extension']; } function file_icon($file, $type = 'png') { $ext_arr = array('doc', 'docx', 'ppt', 'xls', 'txt', 'pdf', 'mdb', 'jpg', 'gif', 'png', 'bmp', 'jpeg', 'rar', 'zip', 'swf', 'flv'); $ext = fileext($file); if ($type == 'png') { if ($ext == 'zip' || $ext == 'rar') $ext = 'rar'; elseif ($ext == 'doc' || $ext == 'docx') $ext = 'doc'; elseif ($ext == 'xls' || $ext == 'xlsx') $ext = 'xls'; elseif ($ext == 'ppt' || $ext == 'pptx') $ext = 'ppt'; elseif ($ext == 'flv' || $ext == 'swf' || $ext == 'rm' || $ext == 'rmvb') $ext = 'flv'; else $ext = 'do'; } if (in_array($ext, $ext_arr)) { return CONFIG_SITEURL . 'statics/images/ext/' . $ext . '.' . $type; } else { return CONFIG_SITEURL . 'statics/images/ext/blank.' . $type; } } function is_image($file) { $ext_arr = array('jpg', 'gif', 'png', 'bmp', 'jpeg', 'tiff'); $ext = fileext($file); return in_array($ext, $ext_arr) ? true : false; } function safe_replace($string) { $string = str_replace('%20', '', $string); $string = str_replace('%27', '', $string); $string = str_replace('%2527', '', $string); $string = str_replace('*', '', $string); $string = str_replace('"', '&quot;', $string); $string = str_replace("'", '', $string); $string = str_replace('"', '', $string); $string = str_replace(';', '', $string); $string = str_replace('<', '&lt;', $string); $string = str_replace('>', '&gt;', $string); $string = str_replace("{", '', $string); $string = str_replace('}', '', $string); $string = str_replace('\\', '', $string); return $string; } function new_stripslashes($string) { if (!is_array($string)) return stripslashes($string); foreach ($string as $key => $val) $string[$key] = new_stripslashes($val); return $string; } function new_addslashes($string) { if (!is_array($string)) return addslashes($string); foreach ($string as $key => $val) $string[$key] = new_addslashes($val); return $string; } function seo($catid = '', $title = '', $description = '', $keyword = '') { if (!empty($title)) $title = strip_tags($title); if (!empty($description)) $description = strip_tags($description); if (!empty($keyword)) $keyword = str_replace(' ', ',', strip_tags($keyword)); $site = F("Config"); $cat = getCategory($catid); $seo['site_title'] = $site['sitename']; $titleKeywords = ""; $seo['keyword'] = $keyword != $cat['setting']['meta_keywords'] ? (isset($keyword) && !empty($keyword) ? $keyword . (isset($cat['setting']['meta_keywords']) && !empty($cat['setting']['meta_keywords']) ? "," . $cat['setting']['meta_keywords'] : "") : $titleKeywords . (isset($cat['setting']['meta_keywords']) && !empty($cat['setting']['meta_keywords']) ? "," . $cat['setting']['meta_keywords'] : "")) : (isset($keyword) && !empty($keyword) ? $keyword : $cat['catname']); $seo['description'] = isset($description) && !empty($description) ? $description : $title . (isset($keyword) && !empty($keyword) ? $keyword : ""); $seo['title'] = $cat['setting']['meta_title'] != $title ? ((isset($title) && !empty($title) ? $title . ' - ' : '') . (isset($cat['setting']['meta_title']) && !empty($cat['setting']['meta_title']) ? $cat['setting']['meta_title'] . ' - ' : (isset($cat['catname']) && !empty($cat['catname']) ? $cat['catname'] . ' - ' : ''))) : (isset($title) && !empty($title) ? $title . " - " : ($cat['catname'] ? $cat['catname'] . " - " : "")); foreach ($seo as $k => $v) { $seo[$k] = str_replace(array("\n", "\r"), '', $v); } return $seo; } function page($total, $size = 0, $number = 0, $config = array()) { static $_pageCache = array(); $cacheIterateId = to_guid_string(func_get_args()); if (isset($_pageCache[$cacheIterateId])) { return $_pageCache[$cacheIterateId]; } $defaultConfig = array( 'number' => $number, 'param' => C("VAR_PAGE"), 'rule' => '', 'isrule' => false, 'tpl' => '', 'tplconfig' => array('listlong' => 6, 'listsidelong' => 2, "first" => "首页", "last" => "尾页", "prev" => "上一页", "next" => "下一页", "list" => "*", "disabledclass" => ""), ); $cfg = array( 'listlong' => 6, 'listsidelong' => 2, 'list' => '*', 'currentclass' => 'current', 'first' => '&laquo;', 'prev' => '&#8249;', 'next' => '&#8250;', 'last' => '&raquo;', 'more' => '...', 'disabledclass' => 'disabled', 'jump' => '', 'jumpplus' => '', 'jumpaction' => '', 'jumplong' => 50, ); if (!empty($config) && is_array($config)) { $defaultConfig = array_merge($defaultConfig, $config); } $defaultConfig['size'] = $size ? $size : C("PAGE_LISTROWS"); foreach ($cfg as $key => $value) { if (isset($defaultConfig[$key])) { $defaultConfig['tplconfig'][$key] = isset($defaultConfig[$key]) ? $defaultConfig[$key] : $value; } } import('Page'); if ($defaultConfig['isrule'] && empty($defaultConfig['rule'])) { $URLRULE = $GLOBALS['URLRULE'] ? $GLOBALS['URLRULE'] : URLRULE; $PageLink = array(); if (!is_array($URLRULE)) { $URLRULE = explode("~", $URLRULE); } $PageLink['index'] = $URLRULE['index'] ? $URLRULE['index'] : $URLRULE[0]; $PageLink['list'] = $URLRULE['list'] ? $URLRULE['list'] : $URLRULE[1]; $defaultConfig['rule'] = $PageLink; } else if ($defaultConfig['isrule'] && !is_array($defaultConfig['rule'])) { $URLRULE = explode('|', $defaultConfig['rule']); $PageLink = array(); $PageLink['index'] = $URLRULE[0]; $PageLink['list'] = $URLRULE[1]; $defaultConfig['rule'] = $PageLink; } $Page = new Page($total, $defaultConfig['size'], $defaultConfig['number'], $defaultConfig['list'], $defaultConfig['param'], $defaultConfig['rule'], $defaultConfig['isrule']); $Page->SetPager('default', $defaultConfig['tpl'], $defaultConfig['tplconfig']); $_pageCache[$cacheIterateId] = $Page; return $_pageCache[$cacheIterateId]; } function urlDomain($url) { if ($url) { $pathinfo = parse_url($url); return $pathinfo['scheme'] . "://" . $pathinfo['host'] . "/"; } return false; } function get_url() { $sys_protocal = isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == '443' ? 'https://' : 'http://'; $php_self = $_SERVER['PHP_SELF'] ? safe_replace($_SERVER['PHP_SELF']) : safe_replace($_SERVER['SCRIPT_NAME']); $path_info = isset($_SERVER['PATH_INFO']) ? safe_replace($_SERVER['PATH_INFO']) : ''; $relate_url = isset($_SERVER['REQUEST_URI']) ? safe_replace($_SERVER['REQUEST_URI']) : $php_self . (isset($_SERVER['QUERY_STRING']) ? '?' . safe_replace($_SERVER['QUERY_STRING']) : $path_info); return $sys_protocal . (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : '') . $relate_url; } function cn_urlencode($url) { $pregstr = "/[\x{4e00}-\x{9fa5}]+/u"; if (preg_match_all($pregstr, $url, $matchArray)) { foreach ($matchArray[0] as $key => $val) { $url = str_replace($val, urlencode($val), $url); } if (strpos($url, ' ')) { $url = str_replace(' ', '%20', $url); } } return $url; } function get_avatar($id_or_email, $size = '96', $default = '', $alt = false) { if (!is_numeric($size)) $size = '96'; $email = ''; if (is_int($id_or_email)) { $id = (int) $id_or_email; $userdata = service("Passport")->getLocalUser($id); $email = $userdata['email']; } else { $email = $id_or_email; } if (empty($default)) { $default = 'mystery'; } if (!empty($email)) $email_hash = md5(strtolower($email)); if (!empty($email)) $host = sprintf("http://%d.gravatar.com", ( hexdec($email_hash[0]) % 2)); else $host = 'http://0.gravatar.com'; if ('mystery' == $default) $default = "$host/avatar/ad516503a11cd5ca435acc9bb6523536?s={$size}"; elseif (!empty($email) && 'gravatar_default' == $default) $default = ''; elseif ('gravatar_default' == $default) $default = "$host/avatar/s={$size}"; elseif (empty($email)) $default = "$host/avatar/?d=$default&amp;s={$size}"; if (!empty($email)) { $out = "$host/avatar/"; $out .= $email_hash; $out .= '?s=' . $size; $out .= '&amp;d=' . urlencode($default); $avatar = $out; } else { $avatar = $default; } return $avatar; } function hits($catid, $id) { $tab = ucwords(getModel(getCategory($catid, 'modelid'), 'tablename')); return M($tab)->where(array("id" => $id))->getField("views"); } function titleurl($catid, $id) { $tab = ucwords(getModel(getCategory($catid, 'modelid'), 'tablename')); return M($tab)->where(array("id" => $id))->getField("url"); } function commcount($catid, $id) { $comment_id = "c-$catid-$id"; return M("Comments")->where(array("comment_id" => $comment_id, "parent" => 0, "approved" => 1))->count(); } function title_style($style, $html = 1) { $str = ''; if ($html) { $str = ' style="'; } $style_arr = explode(';', $style); if (!empty($style_arr[0])) { $str .= 'color:' . $style_arr[0] . ';'; } if (!empty($style_arr[1])) { $str .= 'font-weight:' . $style_arr[1] . ';'; } if ($html) { $str .= '" '; } return $style ? $str : ""; } function cReplaceExpression($content, $emotionPath = '', $classStyle = '') { D("Comments")->replaceExpression($content, $emotionPath, $classStyle); return $content; } function getTagsUrl($tagid, $tag) { $urlrules = F("urlrules"); $urlrules = $urlrules[AppframeAction::$Cache['Config']['tagurl']]; if (!$urlrules) { $urlrules = 'index.php?g=Tags&tagid={$tagid}|index.php?g=Tags&tagid={$tagid}&page={$page}'; } $replace_l = array(); $replace_r = array(); if (strstr($urlrules, '{$tagid}')) { if ($tagid) { $replace_l[] = '{$tagid}'; $replace_r[] = $tagid; } } if (strstr($urlrules, '{$tag}')) { $replace_l[] = '{$tag}'; $replace_r[] = $tag; } $tagurlrules = str_replace($replace_l, $replace_r, $urlrules); $tagurlrules = explode("|", $tagurlrules); $parse_url = parse_url($tagurlrules[0]); if (!isset($parse_url['host'])) { $url = CONFIG_SITEURL . $tagurlrules[0]; } else { $url = $tagurlrules[0]; } return $url; } function thumb($imgurl, $width = 100, $height = 100, $thumbType = 0, $smallpic = 'nopic.gif') { static $_thumb_cache = array(); if (empty($imgurl)) { return $smallpic; } $key = md5($imgurl . $width . $height . $thumbType . $smallpic); if (isset($_thumb_cache[$key])) { return $_thumb_cache[$key]; } if (!$width || !$height) { return $smallpic; } if (empty($_SERVER['DOCUMENT_ROOT']) && !empty($_SERVER['SCRIPT_FILENAME'])) { $_SERVER['DOCUMENT_ROOT'] = str_replace('\\', '/', substr($_SERVER['SCRIPT_FILENAME'], 0, 0 - strlen($_SERVER['PHP_SELF']))); } if (empty($_SERVER['DOCUMENT_ROOT']) && !empty($_SERVER['PATH_TRANSLATED'])) { $_SERVER['DOCUMENT_ROOT'] = str_replace('\\', '/', substr(str_replace('\\\\', '\\', $_SERVER['PATH_TRANSLATED']), 0, 0 - strlen($_SERVER['PHP_SELF']))); } $imgParse = parse_url($imgurl); $imgPath = $_SERVER['DOCUMENT_ROOT'] . $imgParse['path']; $basename = basename($imgurl); $imgPathDir = str_replace($basename, '', $imgPath); $newFileName = "thumb_{$width}_{$height}_" . $basename; if (file_exists($imgPathDir . $newFileName)) { return str_replace($basename, $newFileName, $imgurl); } if (!file_exists($imgPath)) { return $imgurl; } list($width_t, $height_t, $type, $attr) = getimagesize($imgPath); if ($width >= $width_t || $height >= $height_t) { return $imgurl; } import('Image'); if (1 == $thumbType) { Image::thumb2($imgPath, $imgPathDir . $newFileName, '', $width, $height, true); } else { Image::thumb($imgPath, $imgPathDir . $newFileName, '', $width, $height, true); } $_thumb_cache[$key] = str_replace($basename, $newFileName, $imgurl); return $_thumb_cache[$key]; } function isMin($value, $length) { return mb_strlen($value, 'utf-8') >= (int) $length ? true : false; } function isMax($value, $length) { return mb_strlen($value, 'utf-8') <= (int) $length ? true : false; } function unescape($str) { $ret = ''; $len = strlen($str); for ($i = 0; $i < $len; $i++) { if ($str[$i] == '%' && $str[$i + 1] == 'u') { $val = hexdec(substr($str, $i + 2, 4)); if ($val < 0x7f) $ret .= chr($val); else if ($val < 0x800) $ret .= chr(0xc0 | ($val >> 6)) . chr(0x80 | ($val & 0x3f)); else $ret .= chr(0xe0 | ($val >> 12)) . chr(0x80 | (($val >> 6) & 0x3f)) . chr(0x80 | ($val & 0x3f)); $i += 5; } else if ($str[$i] == '%') { $ret .= urldecode(substr($str, $i, 3)); $i += 2; } else $ret .= $str[$i]; } return $ret; } function getCategory($catid, $field = '', $newCache = false) { if (empty($catid)) { return false; } $key = 'getCategory_' . $catid; if ($newCache) { S($key, NULL); } $cache = S($key); if ($cache === 'false') { return false; } if (empty($cache)) { $cache = M('Category')->where(array('catid' => $catid))->find(); if (empty($cache)) { S($key, 'false', 60); return false; } else { $cache['setting'] = unserialize($cache['setting']); $cache['extend'] = $cache['setting']['extend']; S($key, $cache, 3600); } } if ($field) { if (false !== strpos($field, '.')) { $vars = explode('.', $field); return $cache[$vars[0]][$vars[1]]; } else { return $cache[$field]; } } else { return $cache; } } function getModel($modelid, $field = '') { if (empty($modelid)) { return false; } $key = 'getModel_' . $modelid; $cache = S($key); if ($cache === 'false') { return false; } if (empty($cache)) { $cache = M('Model')->where(array('modelid' => $modelid))->find(); if (empty($cache)) { S($key, 'false', 60); return false; } else { S($key, $cache, 3600); } } if ($field) { return $cache[$field]; } else { return $cache; } }alias_import(array ( 'PHPMailer' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/class.phpmailer.php', 'Pclzip' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Pclzip.class.php', 'UploadFile' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/UploadFile.class.php', 'Dir' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Dir.class.php', 'Tree' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Tree.class.php', 'RBAC' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/RBAC.class.php', 'Input' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Input.class.php', 'Image' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Image.class.php', 'Form' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Form.class.php', 'Html' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Html.class.php', 'Url' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Url.class.php', 'Content' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Content.class.php', 'Module' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Module.class.php', 'Ftp' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Ftp.class.php', 'Cacheapi' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Cacheapi.class.php', 'Page' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Util/Page.class.php', )); L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_MODULE_NOT_INSTAL_' => '该模块没有安装或者已经被禁用', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_ACTION_NOT_EXIST_' => '控制器不存在或者没有定义', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '您所请求的方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', ));C(array ( 'app_status' => 'debug', 'app_file_case' => true, 'app_autoload_path' => '@.TagLib', 'app_tags_on' => true, 'app_sub_domain_deploy' => false, 'app_sub_domain_rules' => array ( ), 'app_sub_domain_deny' => array ( ), 'app_group_list' => 'Admin,Attachment,Web,Models,Tags,Api,Contents', 'app_group_mode' => 1, 'app_group_path' => 'Modules', 'action_suffix' => '', 'cookie_expire' => '3600', 'cookie_domain' => '', 'cookie_path' => '/', 'cookie_prefix' => 'lbc0xt_', 'default_m_layer' => 'Model', 'default_c_layer' => 'Action', 'default_v_layer' => 'Tpl', 'default_app' => '@', 'default_lang' => 'zh-cn', 'default_theme' => '', 'default_group' => 'Web', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_jsonp_handler' => 'jsonpReturn', 'default_filter' => 'htmlspecialchars', 'db_type' => 'mysql', 'db_host' => '127.0.0.1', 'db_name' => 'vipdata3', 'db_user' => 'root', 'db_pwd' => 'Nn5Uq5jU', 'db_port' => '3306', 'db_prefix' => 'vip_', 'db_fieldtype_check' => true, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'db_master_num' => 1, 'db_slave_no' => '', 'db_sql_build_cache' => false, 'db_sql_build_queue' => 'file', 'db_sql_build_length' => 20, 'db_sql_log' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_prefix' => '', 'data_cache_type' => 'File', 'data_cache_path' => '/opt/apache2/htdoc_5.14/#runtime/Temp/', 'data_cache_subdir' => '1', 'data_path_level' => 0, 'error_message' => '您浏览的页面暂时发生了错误！请稍后再试～', 'error_page' => '', 'show_error_msg' => '0', 'trace_exception' => false, 'log_record' => true, 'log_type' => 3, 'log_dest' => '', 'log_extra' => '', 'log_level' => 'EMERG,ALERT,CRIT,ERR', 'log_file_size' => 2097152, 'log_exception_record' => false, 'session_auto_start' => true, 'session_options' => array ( 'domain' => '', ), 'session_type' => '', 'session_prefix' => '', 'tmpl_content_type' => 'text/html', 'tmpl_action_error' => '/opt/apache2/htdoc_5.14/shuipf/Modules/Admin/Tpl/error.php', 'tmpl_action_success' => '/opt/apache2/htdoc_5.14/shuipf/Modules/Admin/Tpl/success.php', 'tmpl_exception_file' => '/opt/apache2/htdoc_5.14/shuipf/Core/Tpl/think_exception.tpl', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.php', 'tmpl_file_depr' => '/', 'url_case_insensitive' => false, 'url_model' => 0, 'url_pathinfo_depr' => '/', 'url_pathinfo_fetch' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'url_html_suffix' => '.html', 'url_deny_suffix' => 'ico|png|gif|jpg', 'url_params_bind' => true, 'url_404_redirect' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_ajax_submit' => 'ajax', 'var_jsonp_handler' => 'callback', 'var_pathinfo' => 's', 'var_url_params' => '_URL_', 'var_template' => 't', 'var_filters' => 'filter_exp', 'output_encode' => false, 'http_cache_control' => 'private', 'shuipf_appname' => 'ShuipFCMS_UTF8_Free', 'shuipf_build' => 20140226, 'shuipf_version' => '1.5.0', 'cloud_on' => false, 'token_on' => true, 'token_name' => '__hash__', 'token_type' => 'md5', 'page_listrows' => '20', 'var_page' => 'page', 'page_template' => '{first}{prev}{liststart}{list}{listend}{next}{last}<span class="all">共有{recordcount}条信息</span><span class="pageindex">{pageindex}/{pagecount}</span>', 'load_ext_file' => 'extend', 'authcode' => 'hZFUgHrpMRCftFnimq', 'var_session_id' => 'session_id', 'token_reset' => true, 'upload_file_rule' => 'uniqid', 'tmpl_strip_space' => false, 'url_router_on' => false, 'url_route_rules' => array ( ), 'user_auth_on' => true, 'user_auth_type' => 1, 'user_auth_key' => 'UserID', 'admin_auth_key' => 'administrator', 'require_auth_module' => '', 'not_auth_module' => 'Public', 'user_auth_gateway' => '', 'guest_auth_on' => false, 'user_auth_model' => 'User', 'shuipf_fields_path' => '/opt/apache2/htdoc_5.14/shuipf/Lib/Fields/', 'uploadfilepath' => '/opt/apache2/htdoc_5.14/d/file/', 'taglib_build_in' => 'cx,shuipf', 'tags' => array ( 'app_init' => false, 'path_info' => false, 'route_check' => array ( 2 => array ( 'ruleid' => 2, 'tagname' => 'route_check', '_type' => 2, 'module' => '', 'behavior' => 'CheckRoute', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/CheckRouteBehavior.class.php', ), ), 'app_begin' => array ( 1 => array ( 'ruleid' => 1, 'tagname' => 'app_begin', '_type' => 2, 'module' => '', 'behavior' => 'ReadHtmlCache', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/ReadHtmlCacheBehavior.class.php', ), ), 'action_name' => false, 'action_begin' => false, 'view_begin' => false, 'view_template' => false, 'view_parse' => array ( 3 => array ( 'ruleid' => 3, 'tagname' => 'view_parse', '_type' => 2, 'module' => '', 'behavior' => 'ParseTemplate', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/ParseTemplateBehavior.class.php', ), ), 'view_filter' => array ( 4 => array ( 'ruleid' => 4, 'tagname' => 'view_filter', '_type' => 2, 'module' => '', 'behavior' => 'ContentReplace', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/ContentReplaceBehavior.class.php', ), 5 => array ( 'ruleid' => 5, 'tagname' => 'view_filter', '_type' => 2, 'module' => '', 'behavior' => 'TokenBuild', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/TokenBuildBehavior.class.php', ), 6 => array ( 'ruleid' => 6, 'tagname' => 'view_filter', '_type' => 2, 'module' => '', 'behavior' => 'WriteHtmlCache', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/WriteHtmlCacheBehavior.class.php', ), 7 => array ( 'ruleid' => 7, 'tagname' => 'view_filter', '_type' => 2, 'module' => '', 'behavior' => 'ShowRuntime', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/ShowRuntimeBehavior.class.php', ), ), 'view_end' => array ( 8 => array ( 'ruleid' => 8, 'tagname' => 'view_end', '_type' => 2, 'module' => '', 'behavior' => 'ShowPageTrace', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/ShowPageTraceBehavior.class.php', ), ), 'action_end' => false, 'app_end' => false, 'appframe_rbac_init' => array ( 9 => array ( 'ruleid' => 9, 'tagname' => 'appframe_rbac_init', '_type' => 2, 'module' => '', 'behavior' => 'Rbac', 'phpfile' => '/opt/apache2/htdoc_5.14/shuipf/Core/Lib/Behavior/RbacBehavior.class.php', ), ), ), ));G('loadTime');Think::Start();